// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: account.proto

package account

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Account service

type AccountService interface {
	Registry(ctx context.Context, in *RegistryAccountRequest, opts ...client.CallOption) (*RegistryAccountResponse, error)
	Verify(ctx context.Context, in *VerifyAccountRequest, opts ...client.CallOption) (*VerifyAccountResponse, error)
	Login(ctx context.Context, in *LoginAccountRequest, opts ...client.CallOption) (*LoginAccountResponse, error)
	Logout(ctx context.Context, in *LogoutAccounRequest, opts ...client.CallOption) (*LogoutAccountResponse, error)
	Test(ctx context.Context, in *TestAccountRequest, opts ...client.CallOption) (*TstAccountResponse, error)
}

type accountService struct {
	c    client.Client
	name string
}

func NewAccountService(name string, c client.Client) AccountService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "account"
	}
	return &accountService{
		c:    c,
		name: name,
	}
}

func (c *accountService) Registry(ctx context.Context, in *RegistryAccountRequest, opts ...client.CallOption) (*RegistryAccountResponse, error) {
	req := c.c.NewRequest(c.name, "Account.registry", in)
	out := new(RegistryAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) Verify(ctx context.Context, in *VerifyAccountRequest, opts ...client.CallOption) (*VerifyAccountResponse, error) {
	req := c.c.NewRequest(c.name, "Account.verify", in)
	out := new(VerifyAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) Login(ctx context.Context, in *LoginAccountRequest, opts ...client.CallOption) (*LoginAccountResponse, error) {
	req := c.c.NewRequest(c.name, "Account.login", in)
	out := new(LoginAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) Logout(ctx context.Context, in *LogoutAccounRequest, opts ...client.CallOption) (*LogoutAccountResponse, error) {
	req := c.c.NewRequest(c.name, "Account.logout", in)
	out := new(LogoutAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) Test(ctx context.Context, in *TestAccountRequest, opts ...client.CallOption) (*TstAccountResponse, error) {
	req := c.c.NewRequest(c.name, "Account.test", in)
	out := new(TstAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Account service

type AccountHandler interface {
	Registry(context.Context, *RegistryAccountRequest, *RegistryAccountResponse) error
	Verify(context.Context, *VerifyAccountRequest, *VerifyAccountResponse) error
	Login(context.Context, *LoginAccountRequest, *LoginAccountResponse) error
	Logout(context.Context, *LogoutAccounRequest, *LogoutAccountResponse) error
	Test(context.Context, *TestAccountRequest, *TstAccountResponse) error
}

func RegisterAccountHandler(s server.Server, hdlr AccountHandler, opts ...server.HandlerOption) error {
	type account interface {
		Registry(ctx context.Context, in *RegistryAccountRequest, out *RegistryAccountResponse) error
		Verify(ctx context.Context, in *VerifyAccountRequest, out *VerifyAccountResponse) error
		Login(ctx context.Context, in *LoginAccountRequest, out *LoginAccountResponse) error
		Logout(ctx context.Context, in *LogoutAccounRequest, out *LogoutAccountResponse) error
		Test(ctx context.Context, in *TestAccountRequest, out *TstAccountResponse) error
	}
	type Account struct {
		account
	}
	h := &accountHandler{hdlr}
	return s.Handle(s.NewHandler(&Account{h}, opts...))
}

type accountHandler struct {
	AccountHandler
}

func (h *accountHandler) Registry(ctx context.Context, in *RegistryAccountRequest, out *RegistryAccountResponse) error {
	return h.AccountHandler.Registry(ctx, in, out)
}

func (h *accountHandler) Verify(ctx context.Context, in *VerifyAccountRequest, out *VerifyAccountResponse) error {
	return h.AccountHandler.Verify(ctx, in, out)
}

func (h *accountHandler) Login(ctx context.Context, in *LoginAccountRequest, out *LoginAccountResponse) error {
	return h.AccountHandler.Login(ctx, in, out)
}

func (h *accountHandler) Logout(ctx context.Context, in *LogoutAccounRequest, out *LogoutAccountResponse) error {
	return h.AccountHandler.Logout(ctx, in, out)
}

func (h *accountHandler) Test(ctx context.Context, in *TestAccountRequest, out *TstAccountResponse) error {
	return h.AccountHandler.Test(ctx, in, out)
}
